================================================================================
If statement
================================================================================

package if_statement

main :: proc () {
    if cond {
    } else if other {
    } else {
    }
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (top_level (declaration (decl_identifier) (operator) (operator) (proc_literal (keyword) (parameter_list (Token_OpenParen) (Token_CloseParen)) (block (Token_OpenBrace) (Token_Semicolon) (if_statement (keyword) (Token_Ident) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace)) (keyword) (if_statement (keyword) (Token_Ident) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace)) (keyword) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace)))) (Token_Semicolon) (Token_CloseBrace))))) (Token_Semicolon)) 

================================================================================
Ranged for loop
================================================================================

package ranged_for

main :: proc () {
    for a in b {
    }
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (proc_literal (keyword) (parameter_list (Token_OpenParen) (Token_CloseParen)) (block (Token_OpenBrace) (Token_Semicolon) (for_statement (keyword) (Token_Ident) (keyword) (Token_Ident) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace))) (Token_Semicolon) (Token_CloseBrace))))) (Token_Semicolon)) 

================================================================================
C-style for loop with empty clause
================================================================================

package c_style_for

main :: proc () {
    for ;; {
    }
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (proc_literal (keyword) (parameter_list (Token_OpenParen) (Token_CloseParen)) (block (Token_OpenBrace) (Token_Semicolon) (for_statement (keyword) (Token_Semicolon) (Token_Semicolon) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace))) (Token_Semicolon) (Token_CloseBrace))))) (Token_Semicolon))

================================================================================
C-style for loop with full clause
================================================================================

package c_style_for

main :: proc () {
    for i := 0; i < 100; i += 1 {
    }
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (proc_literal (keyword) (parameter_list (Token_OpenParen) (Token_CloseParen)) (block (Token_OpenBrace) (Token_Semicolon) (for_statement (keyword) (declaration (decl_identifier) (operator) (operator) (Token_Integer)) (Token_Semicolon) (binary_expression (Token_Ident) (operator) (Token_Integer)) (Token_Semicolon) (assignment_statement (Token_Ident) (operator) (Token_Integer)) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace))) (Token_Semicolon) (Token_CloseBrace))))) (Token_Semicolon)) 

================================================================================
C-style for loop with only condition
================================================================================

package c_style_for

main :: proc () {
    for 1 + i < 100 {
    }
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (proc_literal (keyword) (parameter_list (Token_OpenParen) (Token_CloseParen)) (block (Token_OpenBrace) (Token_Semicolon) (for_statement (keyword) (binary_expression (binary_expression (Token_Integer) (operator) (Token_Ident)) (operator) (Token_Integer)) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace))) (Token_Semicolon) (Token_CloseBrace))))) (Token_Semicolon)) 

================================================================================
C-style for loop with condition and update
================================================================================

package c_style_for

main :: proc () {
    for ; i < 100; i += 2 {
    }
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (proc_literal (keyword) (parameter_list (Token_OpenParen) (Token_CloseParen)) (block (Token_OpenBrace) (Token_Semicolon) (for_statement (keyword) (Token_Semicolon) (binary_expression (Token_Ident) (operator) (Token_Integer)) (Token_Semicolon) (assignment_statement (Token_Ident) (operator) (Token_Integer)) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace))) (Token_Semicolon) (Token_CloseBrace))))) (Token_Semicolon)) 

================================================================================
C-style for loop with only initializer
================================================================================

package c_style_for

main :: proc () {
    for i := 2 ;; {
    }
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (proc_literal (keyword) (parameter_list (Token_OpenParen) (Token_CloseParen)) (block (Token_OpenBrace) (Token_Semicolon) (for_statement (keyword) (declaration (decl_identifier) (operator) (operator) (Token_Integer)) (Token_Semicolon) (Token_Semicolon) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace))) (Token_Semicolon) (Token_CloseBrace))))) (Token_Semicolon)) 

================================================================================
C-style for loop with initializer and update clause
================================================================================

package c_style_for

main :: proc () {
    for  i := 1; ; i += 2 {
    }
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (proc_literal (keyword) (parameter_list (Token_OpenParen) (Token_CloseParen)) (block (Token_OpenBrace) (Token_Semicolon) (for_statement (keyword) (declaration (decl_identifier) (operator) (operator) (Token_Integer)) (Token_Semicolon) (Token_Semicolon) (assignment_statement (Token_Ident) (operator) (Token_Integer)) (block (Token_OpenBrace) (Token_Semicolon) (Token_CloseBrace))) (Token_Semicolon) (Token_CloseBrace))))) (Token_Semicolon)) 
