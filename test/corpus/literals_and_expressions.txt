================================================================================
Basic declarations
================================================================================

package declarations

a :: 10
b := c
a, b, c :: 1, true, d

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (Token_Integer))) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (Token_Ident))) (Token_Semicolon) (top_level (declaration (decl_identifier) (Token_Comma) (decl_identifier) (Token_Comma) (decl_identifier) (operator) (operator) (Token_Integer) (Token_Comma) (Token_Ident) (Token_Comma) (Token_Ident))) (Token_Semicolon))

================================================================================
Literals
================================================================================

package literals

ints :: {
    10_000_000,
    0xDEAD_BEEF,
    0b0001_0010,
    0o777,
}

bools :: {
    true,
    false,
}

floats :: {
    3.1415,
    1.,
    .1,
    1e-15,
    3.0e8,
    1e2,
}

strings :: {
    "the quick brown fox jumps over the lazy dog",
    "hello there\n",
    `hello there\n`,
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (Token_Integer) (Token_Comma) (Token_Integer) (Token_Comma) (Token_Integer) (Token_Comma) (Token_Integer) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (Token_Ident) (Token_Comma) (Token_Ident) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (Token_Float) (Token_Comma) (Token_Float) (Token_Comma) (Token_Float) (Token_Comma) (Token_Float) (Token_Comma) (Token_Float) (Token_Comma) (Token_Float) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (Token_String) (Token_Comma) (Token_String) (Token_Comma) (Token_String) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon)) 

================================================================================
Simple expressions
================================================================================

package expressions

left_unary :: {
    +10,
    -1.0,
    &a,
    ~0b01010101,
    auto_cast 1,
}

right_unary :: {
    a^,
    a or_return,
}

proc_call :: {
    f(),
    g(10, 20),
    h(a = 10, b = 20),
}

indexing_and_slicing :: {
    a[0],
    a[:],
    a[begin:],
    a[:end],
    a[begin:end],
}

binary :: {
    a + b,
    a - b,
    a * b,
    a / b,
    a or_else b,
    0b10101010 ~ 0b01010101,
    0b10101010 & 0b01010101,
}

--------------------------------------------------------------------------------

(source_file (package_clause (Token_package) (package_identifier)) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (left_unary_expression (operator) (Token_Integer)) (Token_Comma) (left_unary_expression (operator) (Token_Float)) (Token_Comma) (left_unary_expression (operator) (Token_Ident)) (Token_Comma) (left_unary_expression (operator) (Token_Integer)) (Token_Comma) (type_conversion (operator) (Token_Integer)) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (right_unary_expression (Token_Ident) (operator)) (Token_Comma) (right_unary_expression (Token_Ident) (operator)) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (proc_call (Token_Ident) (Token_OpenParen) (Token_CloseParen)) (Token_Comma) (proc_call (Token_Ident) (Token_OpenParen) (initializer_list (Token_Integer) (Token_Comma) (Token_Integer)) (Token_CloseParen)) (Token_Comma) (proc_call (Token_Ident) (Token_OpenParen) (initializer_list (single_assignment (Token_Ident) (Token_Eq) (Token_Integer)) (Token_Comma) (single_assignment (Token_Ident) (Token_Eq) (Token_Integer))) (Token_CloseParen)) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (index_expression (Token_Ident) (Token_OpenBracket) (Token_Integer) (Token_CloseBracket)) (Token_Comma) (index_expression (Token_Ident) (Token_OpenBracket) (operator) (Token_CloseBracket)) (Token_Comma) (index_expression (Token_Ident) (Token_OpenBracket) (Token_Ident) (operator) (Token_CloseBracket)) (Token_Comma) (index_expression (Token_Ident) (Token_OpenBracket) (operator) (Token_Ident) (Token_CloseBracket)) (Token_Comma) (index_expression (Token_Ident) (Token_OpenBracket) (Token_Ident) (operator) (Token_Ident) (Token_CloseBracket)) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon) (top_level (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon) (initializer_list (binary_expression (Token_Ident) (operator) (Token_Ident)) (Token_Comma) (binary_expression (Token_Ident) (operator) (Token_Ident)) (Token_Comma) (binary_expression (Token_Ident) (operator) (Token_Ident)) (Token_Comma) (binary_expression (Token_Ident) (operator) (Token_Ident)) (Token_Comma) (binary_expression (Token_Ident) (operator) (Token_Ident)) (Token_Comma) (binary_expression (Token_Integer) (operator) (Token_Integer)) (Token_Comma) (binary_expression (Token_Integer) (operator) (Token_Integer)) (Token_Comma)) (Token_CloseBrace)))) (Token_Semicolon)) 
