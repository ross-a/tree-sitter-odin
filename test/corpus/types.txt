================================================================================
Types
================================================================================

package types

builtins :: {
    int,
    f64,
    string,
    i8,
    bool,
}

arrays :: {
    []i64,
    [^]i64,
    [10]float,
    [dynamic]^int,
}

maps :: {
    map[string]int,
    map[[2]int][2]float,
}

structs :: {
    struct{},
    struct{a, b: int},
    struct{a: [dynamic]int, b: bool},
}

--------------------------------------------------------------------------------

(source_file
 (package_clause (Token_package) (package_identifier))
 (Token_Semicolon)
 (top_level
  (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon)
	 (initializer_list
	  (Token_Ident) (Token_Comma) (Token_Ident) (Token_Comma)
		(Token_Ident) (Token_Comma) (Token_Ident) (Token_Comma)
		(Token_Ident) (Token_Comma))
	 (Token_CloseBrace))))
	 (Token_Semicolon)
 (top_level
  (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon)
	 (initializer_list
	  (array_type (array_type_prefix (Token_OpenBracket) (Token_CloseBracket)) (type_identifier)) (Token_Comma)
		(array_type (array_type_prefix (Token_OpenBracket) (operator) (Token_CloseBracket)) (type_identifier)) (Token_Comma)
		(array_type (array_type_prefix (Token_OpenBracket) (Token_Integer) (Token_CloseBracket)) (type_identifier)) (Token_Comma)
		(array_type (array_type_prefix (Token_OpenBracket) (keyword) (Token_CloseBracket)) (pointer_type (operator) (type_identifier))) (Token_Comma))
	 (Token_CloseBrace))))
	 (Token_Semicolon)
 (top_level
  (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon)
	 (initializer_list
	  (map_type (keyword) (Token_OpenBracket) (type_identifier) (Token_CloseBracket) (type_identifier)) (Token_Comma)
		(map_type (keyword) (Token_OpenBracket)
		 (array_type (array_type_prefix (Token_OpenBracket) (Token_Integer) (Token_CloseBracket)) (type_identifier)) (Token_CloseBracket)
		 (array_type (array_type_prefix (Token_OpenBracket) (Token_Integer) (Token_CloseBracket)) (type_identifier))) (Token_Comma))
	 (Token_CloseBrace))))
	 (Token_Semicolon)
 (top_level
  (declaration (decl_identifier) (operator) (operator) (compound_literal (Token_OpenBrace) (Token_Semicolon)
	 (initializer_list
	  (struct_type (keyword) (Token_OpenBrace) (Token_CloseBrace)) (Token_Comma)
		(struct_type (keyword) (Token_OpenBrace) (struct_member (Token_Ident) (Token_Comma) (Token_Ident) (Token_Colon) (type_identifier)) (Token_CloseBrace)) (Token_Comma)
		(struct_type (keyword) (Token_OpenBrace) (struct_member (Token_Ident) (Token_Colon) (array_type (array_type_prefix (Token_OpenBracket) (keyword) (Token_CloseBracket)) (type_identifier))) (Token_Comma) (struct_member (Token_Ident) (Token_Colon) (type_identifier)) (Token_CloseBrace)) (Token_Comma))
		(Token_CloseBrace)))) (Token_Semicolon)) 
